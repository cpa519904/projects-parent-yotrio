<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 提供注解支持，用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式）上面的注解-->
    <context:annotation-config/>

    <!-- 开启controller注解支持，还可以在指定的package下扫描以及注册javabean-->
    <context:component-scan base-package="com.yotrio.pound.web.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 使用mvc:annotation-driven代替上边注解映射器和注解适配器配置 ,默认加载很多的参数绑定方法，比如json转换解析器就默认加载了,实际开发是使用这个 -->
    <!-- 配置注解驱动  -->
    <!--<mvc:annotation-driven/>-->
    <mvc:annotation-driven>
        <!--设置不使用默认消息转换器-->
        <mvc:message-converters register-defaults="false">
            <!-- 处理responseBody 里面日期类型 -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
            <!-- 解决返回中文乱码问题 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 实现json的自动转换化,把json数据解析成PostUserBean类，并且把解析结果赋值给controller中@RequestBody标记的参数postBean,自动把FirstResposeBean转换成json数据返回-->
    <bean id="jacksonMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <!--这里顺序不能反，一定先写text/html，不然IE下会出现下载提示-->
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--使用默认的Servlet 来响应静态文件-->
    <mvc:default-servlet-handler/>
    <!--<mvc:resources mapping="/statics/**" location="/statics/"/>-->
    <mvc:resources mapping="/layuiadmin/**" location="/WEB-INF/layuiadmin/"/>

    <!--shiro-mvc-->
    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 文件上传 start 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码,必须和jsp的pageEncoding属性一致，以便正确读取表单内容，默认为ISO-8859-1 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 文件大小最大值 上传文件大小限制为10M，10*1024*1024 -->
        <property name="maxUploadSize" value="10485760"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="4096"/>
    </bean>
    <!-- 文件上传 end-->

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <!--<bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!--<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>-->
    <!--<property name="prefix" value="/WEB-INF/views/"/>&lt;!&ndash;设置JSP文件的目录位置&ndash;&gt;-->
    <!--&lt;!&ndash;<property name="suffix" value=".jsp"/>&ndash;&gt;-->
    <!--<property name="suffix" value=".html"/>-->
    <!--</bean>-->

    <!--使用thymeleaf模版引擎-->
    <bean id="templateResolver" class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <property name="templateMode" value="HTML"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".html"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="cacheable" value="false"/>
    </bean>
    <bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver"/>
    </bean>
    <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine"/>
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
    </bean>


    <!--跨域拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/api/**"/>
            <bean class="com.yotrio.pound.interceptor.AccessCheckInterceptor">
                <property name="allowedHosts">
                    <list>
                        <value>localhost</value>
                        <value>127.0.0.1</value>
                        <value>192.168.1.127</value>
                        <value>47.98.181.17</value>
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>


</beans>